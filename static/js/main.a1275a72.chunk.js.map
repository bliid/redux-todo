{"version":3,"sources":["components/NewTodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","redux/reducers/todoreducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["NewTodoForm","props","handleChange","evt","setState","target","name","value","handleSubmit","preventDefault","createTodo","state","id","uuid","completed","task","className","onSubmit","this","htmlFor","type","placeholder","onChange","Component","Todo","handleRemove","removeTodo","toggleForm","isEditing","handleUpdate","updateTodo","handleToggle","toggleTodo","result","key","timeout","classNames","onClick","TodoList","toggleCompletion","create","newTodo","remove","remeveTodo","update","updatedTask","updatedTodo","todos","map","todo","connect","list","dispatch","App","Boolean","window","location","hostname","match","INITIAL_STATE","todosReducer","action","newlist","filter","t","newtodos","updatedTodos","toggleTodos","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1275a72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n  }\r\n  handleChange = (evt) => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n    this.setState({ task: \"\" });\r\n  }\r\n  render() {\r\n    return (\r\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n        <label htmlFor='task'>New Todo</label>\r\n        <input\r\n          type='text'\r\n          placeholder='New Todo'\r\n          id='task'\r\n          name='task'\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button>Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n  }\r\n  handleRemove = () => {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm = () => {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  handleUpdate = (evt) => {\r\n    evt.preventDefault();\r\n    //take new task data and pass up to parent\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange = (evt) => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleToggle = (evt) => {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div key='editing' timeout={500} classNames='form'>\r\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n            <input\r\n              type='text'\r\n              value={this.state.task}\r\n              name='task'\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div key='normal' timeout={500} classNames='task-text'>\r\n          <li className='Todo-task' onClick={this.handleToggle}>\r\n            {this.props.task}\r\n          </li>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div\r\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\r\n      >\r\n        {result}\r\n        <div className='Todo-buttons'>\r\n          <button onClick={this.toggleForm}>\r\n            updateeeeeeee\r\n          </button>\r\n          <button onClick={this.handleRemove}>\r\n            deeeeleyeeeeeee\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport \"./TodoList.css\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass TodoList extends Component {\r\n    toggleCompletion = (id) => {\r\n      this.props.toggleCompletion(id)\r\n    }\r\n    // REDUX function\r\n    create = (newTodo) => {\r\n      this.props.createTodo(newTodo)\r\n    }\r\n    remove = (id) => {\r\n      this.props.remeveTodo(id)\r\n    }\r\n    update = (id, updatedTask) => {\r\n     const updatedTodo = {id: id, updatedTask: updatedTask}\r\n     this.props.updateTodo(updatedTodo)\r\n    }\r\n    render() {\r\n      \r\n      const todos = this.props.todos.map(todo => {\r\n        return (\r\n          <li key={todo.id} classNames='todo'>\r\n            <Todo\r\n              key={todo.id}\r\n              id={todo.id}\r\n              task={todo.task}\r\n              completed={todo.completed}\r\n              removeTodo={this.remove}\r\n              updateTodo={this.update}\r\n              toggleTodo={this.toggleCompletion}\r\n            />\r\n          </li>\r\n        );\r\n      });\r\n      return (\r\n        <div className='TodoList'>\r\n          <h1>\r\n            Get To Work! <span>An Animated Todo List Made With React Hooks.</span>\r\n          </h1>\r\n          <NewTodoForm createTodo={this.create} />\r\n  \r\n          <ul>\r\n            <div className='todo-list'>{todos}</div>\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n const mapStateToProps = (state) => {\r\n   return {\r\n    todos: state.todos.list\r\n   }\r\n }\r\n const mapDispatchToProps = dispatch => {\r\n  return {\r\n    remeveTodo: id => {dispatch({type:'DELETE_TODO', id: id})},\r\n    createTodo: newTodo => {dispatch({type:'CREATE_TODO', newTodo: newTodo})},\r\n    updateTodo: (updatedTodo) => {dispatch({type:'UPDATE_TODO', updatedTodo: updatedTodo})},\r\n    toggleCompletion: id => {dispatch({type:'TOGGLE_COMPLE_TODO', id: id})},\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList)","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\n \n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\r\n    list: []\r\n  };\r\n  \r\n  const todosReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n      case 'DELETE_TODO':\r\n         const newlist = state.list.filter(t => t.id !== action.id)\r\n        return {\r\n          ...state,\r\n          list: newlist\r\n        };\r\n        case 'CREATE_TODO':\r\n            const newtodos = [...state.list, action.newTodo ]\r\n            return {\r\n            ...state,\r\n            list: newtodos\r\n           \r\n        };\r\n        case 'UPDATE_TODO':\r\n            const updatedTodos = state.list.map(todo => {\r\n                if (todo.id === action.updatedTodo.id) {\r\n                    return { ...todo, task: action.updatedTodo.updatedTask };\r\n                }\r\n                    return todo;\r\n                });\r\n            return {\r\n            ...state,\r\n            list: updatedTodos\r\n            \r\n           \r\n        };\r\n        case 'TOGGLE_COMPLE_TODO':\r\n            const toggleTodos = state.list.map(todo => {\r\n                if (todo.id === action.id) {\r\n                    return { ...todo, completed: !todo.completed };\r\n                }\r\n                    return todo;\r\n                });\r\n            return {\r\n            ...state,\r\n            list: toggleTodos\r\n            \r\n           \r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default todosReducer;\r\n  ","import { combineReducers } from 'redux';\r\n\r\nimport todosReducer from './reducers/todoreducer';\r\n\r\nexport default combineReducers({\r\n  todos: todosReducer\r\n});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { Provider } from 'react-redux';\nimport  store  from './redux/store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n           <App />\n    </Provider>\n \n    \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}